:PROPERTIES:
:ID:       85b20216-7707-4c47-96e9-2eccc110a0c0
:ROAM_ALIASES: routineParser
:END:
#+title: Routine Parser

* Help
#+begin_src bash :exports result :results pp
routineParser help
#+end_src

#+RESULTS:
#+begin_example
This is a multiple-dispatch command.  -h/--help/--help-syntax is available
for top-level/all subcommands.  Usage is like:
    routineParser {SUBCMD} [subcommand-opts & args]
where subcommand syntaxes are as follows:

  summary [REQUIRED,optional-params]
    Checks if routine is not larger than day
  Options:
      -r=, --routineYaml=  string  REQUIRED  set routineYaml
      -t=, --today=        string  ""        set today

  represent [REQUIRED,optional-params]
    Generates the routine representation in Markdown

    The float hours described at `dayStart` overrides the configuration day
    start
  Options:
      -r=, --routineYaml=  string  REQUIRED  set routineYaml
      -d=, --dayStart=     float   -1.0      set dayStart
      -t=, --today=        string  ""        set today

  patchTimetomeRepeatingTasks [REQUIRED,optional-params]
    Patches the timeto.me export file with the routine tasks
  Options:
      -r=, --routineYaml=   string  REQUIRED  set routineYaml
      -t=, --timetomeJson=  string  REQUIRED  set timetomeJson
      -d=, --dayStart=      float   -1.0      set dayStart
      --today=              string  ""        set today

  ganttChart [REQUIRED,optional-params]
    Generates the routine representation in Mermaid Gantt chart

    The float hours described at `dayStart` overrides the configuration day
    start
  Options:
      -r=, --routineYaml=  string  REQUIRED  set routineYaml
      -d=, --dayStart=     float   -1.0      set dayStart
      -t=, --today=        string  ""        set today
#+end_example


* Example
** Summary
#+begin_src bash :exports both :results pp
routineParser summary -r example.yaml
#+end_src

#+RESULTS:
: (valid: true, rawNeededHours: 4.516666666666667, realNeededHours: 5.983333333333333, dayHours: 13.0, rawStoryPoints: 12, rawEnergyBack: 16, totalStoryPoints: -4)

** Markdown
#+begin_src bash :exports both :results pp
routineParser represent -r example.yaml
#+end_src

#+RESULTS:
#+begin_example
## Wake up (08:00-08:22)
### Exit bedroom - 2sp2eb (08:00-08:17)
- Vest clothes - 5min (08:00-08:05)
- Make the bed - 5min (08:07-08:12)
- Drink water - 1min (08:14-08:15)

## Waking the body (08:30-09:48)
### Breakfast - 2sp3eb (08:30-09:04)
- Prepare the breakfast - 20min (08:30-08:50)
- Eat the breakfast - 10min (08:52-09:02)
### Morning exercises - 3sp4eb (09:09-09:43)
- Warm up - 10min (09:09-09:19)
- Calisthenics - 20min (09:21-09:41)

## Relax (09:56-11:17)
### Go to park - 1sp3eb (09:56-11:12)
- Walk to the park - 20min (09:56-10:16)
- Stay there - 30min (10:18-10:48)
- Walk back home - 20min (10:50-11:10)

## Lunch (11:25-13:51)
### Lunch - 2sp3eb (11:25-11:59)
- Prepare the lunch - 20min (11:25-11:45)
- Eat - 10min (11:47-11:57)
### Clean kitchen - 2sp1eb (12:04-13:46)
- Wash dishes - 100min (12:04-13:44)
#+end_example
** Gantt Chart
#+begin_src bash :exports both :results raw
echo "#+begin_src mermaid :file example.svg"
echo "%%{init: { 'theme': 'dark' } }%%"
routineParser ganttChart -r example.yaml
echo "#+end_src"
#+end_src

#+RESULTS:
#+begin_src mermaid :file example.svg
%%{init: { 'theme': 'dark' } }%%
gantt
  title Routine for 2024-09-21 (0.0.1)
  dateFormat HH:mm
  axisFormat %H:%M

  Day Start : milestone, m1, 08:00, 2m

  section Wake up
  08-00 Exit bedroom - 2sp2eb11min : 08:00, 11m

  section Waking the body
  08-30 Breakfast - 2sp3eb30min : 08:30, 30m
  09-09 Morning exercises - 3sp4eb30min : 09:09, 30m

  section Relax
  09-56 Go to park - 1sp3eb70min : 09:56, 70m

  section Lunch
  11-25 Lunch - 2sp3eb30min : 11:25, 30m
  12-04 Clean kitchen - 2sp1eb100min : 12:04, 100m

  Day End : milestone, m2, 21:00, 2m
#+end_src
